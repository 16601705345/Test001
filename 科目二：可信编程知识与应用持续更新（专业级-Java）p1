科目二：可信编程知识与应用（专业级-Java）

（如果理解有误或者有不对的地方请留言）

站在巨人的肩上，继续盖楼，本团队fork后持续更新
转自：http://3ms.huawei.com/km/blogs/details/7763375
其他帮助：
科目一考试空项目（考前下载）：http://isource.huawei.com/Security_AM/pioneer-exam/tree/master
科目一通过者刷题范围参考：http://3ms.huawei.com/hi/group/3620079/wiki_5861190.html
科目三考试：科目三大家w3自己看，C语言和Java语言相关内容混合一起看，取长补短
科目四考试练习题：http://3ms.huawei.com/hi/group/3620079/wiki_5840636.html?for_statistic_from=all_group_wiki
 
  [ 回目录 ]0 Java虚拟机   
  [ 回目录 ]0.1 运行时帧栈结构   
栈帧的概念
栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。
一个线程中方法的调用链可能会很长，很多方法都同时处于执行状态。对于JVM执行引擎来说，在在活动线程中，只有位于JVM虚拟机栈栈顶的元素才是有效的，即称为当前栈帧，与这个栈帧相关连的方法称为当前方法，定义这个方法的类叫做当前类。
参考：https://zhuanlan.zhihu.com/p/45354152
考察：
栈帧的大小在什么时候确定的？
A. 程序代码编译时
B. 类加载时
C. 运行调用时
答案：A，程序代码编译时确定。

gc主要的回收的内存区域是哪块(AB)
A. 堆区
B. 方法区

GCRoot对象包括哪些对象？



  [ 回目录 ]1 编程语言与应用   
  [ 回目录 ]1.1 原始数据类型与字长   
1.1.0 基础类型考察死角
1.1.0.1 for语句形成的死循环
下面这个例子，算法极容易认为是50，实际上是无穷大的一个死循环
-java代码
01
public class CycTest {
02
  public static void main(String[] args) {
03
    int end = Integer.MAX_VALUE; //定义个循环终止数，可以无限大,区别于int型。
04
    int start = end-50;     //定义起始值
05
    int count = 0;        //初始值
06
    for(int i=start;i<=end;i++){ //循环体
07
       count++;         //循环计数
08
       System.out.println("本次循环次数为:"+count); //输出
09
    }
10
  } 
11
}

输出结果:
run:
本次循环次数为:1
本次循环次数为:2
本次循环次数为:3
......
本次循环次数为:49
本次循环次数为:50
本次循环次数为:51
......
for(int i=start,i<end;i++)，结果就是50了。（i<end），表示边界值不能是一个无穷大数值， 而从start到end也就变成了一段区间了，区间就是50。如果是(i<=end)则end就变成了一个无穷大，不管i怎么加，总是无法大过无穷大，造成死循环。
参考：https://www.jb51.net/article/67817.htm
场景二、for循环陷入无限循环
-java代码
1
public static void main(String[] args) {
2
    for (byte i = -128; i < 128; i++) {
3
        System.out.println("Hello " + i);
4
    }
5
}

byte类型的取值范围[-128,127]，128相当于byte类型的无穷大，永远无法达到。127再相加，就变成了-128溢出从最小位数再开始计算。
Hello 125
Hello 126
Hello 127
Hello -128
Hello -127
Hello -126
场景三、采用double做for循环变量死循环
规则4.1 不能用浮点数作为循环变量
死循环示例：
for(double x = 0; x !=10; x += 0.1){
  System.out.println("hello");
}
场景四、采用浮点数for循环变量造成死循环
下面代码的输出
for(float f =100000000;f<100000010;f++){
  System.out.println(f);
}
A. 不确定
B. 100000000 100000001 100000002 ... 100000010
C. 100000000
D. 死循环
答案：D

1.1.0.2 for循环删除集合陷阱
采用foreach边读边删除，语句是否运行正确？
-java代码
01
public class DeleteCollection {
02
    public static void main(String[] args) {
03
        List<String> list = new LinkedList<String>();
04
        list.add("a");
05
        list.add("b");
06
        list.add("c");
07
        list.add("d");
08
        list.add("e");
09
        for (String str : list) {
10
            //循环删除集合中的元素
11
            if (str.equals("c"))
12
                list.remove(str);
13
        }
14
        System.out.println("还剩余的元素个数：" + list.size());
15
    }
16
}

考察点：执行后抛出ConcurrentModificationException异常还是IllegalStateException?P
实际抛出：ConcurrentModificationException
Exception in thread "main" java.util.ConcurrentModificationException
at java.base/java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:970)
at java.base/java.util.LinkedList$ListItr.next(LinkedList.java:892)
考试陷阱：
（1）如果List<String> list = new ArrayList<>();那么倒数第2个不会抛出异常，其他都抛出异常。

（2）如果是LinkedList，那么倒数两个不会抛出异常，其他都抛出异常。

1.1.0.3 数组类型的声明方式考察
如下四种数组声明方式，哪种不正确？
int[] hello1 = {1,2,3,4};
int[] hello2 = new int[4] {1,2,3,4};
int[] hello3 = new int[] {1,2,3,4};
int[] hello4 = new int[4];
答案：int[] hello2 = new int[4] {1,2,3,4};不正确。
Java语言中，下面哪个语句是创建数组的正确语句？( DE )
A、float f[][] = new float[6][6];
B、float []f[] = new float[6][6];
C、float f[][] = new float[][6];
D、float [][]f = new float[6][6];
E、float [][]f = new float[6][];
解析：不考虑C语言风格，AB也正确
//C语言风格，错误
float f1[][] = new float[6][6];
//虽然古怪，但是不报错，正确
float[] f2[] = new float[6][6];
//C语言风格，并且指定了列号，没有指定行号，错误
float f3[][] = new float[][6];
//标准声明方法，正确
float[][] f4 = new float[6][6];
//只指定行号，列不确定方法，正确
float[][] f5 = new float[6][];

1.1.0.4 哪些数据类型能直接输出？
a. int[] test = {1,2,3,4,5}
b. List<String> list = new LinkedList<>();
c. Map<Integer,Integer> map = new HashMap<>();
d. List<Integer> list  = new ArrayList<>();
答案：a是无法直接输出的
System.out.println(Arrays.toString(test))才可以输出;

1.1.0.4 与表达式 Integer a = 2;等价的类型是哪个？
A. int b = Integer.parseInt("2");
B. Integer b = Integer.valueOf("2");
答案：B
示例代码：
 public static void main(String[] args) {
   Integer a = 2;
   Integer b = Integer.valueOf("2");
   System.out.println(a == b);
}

1.1.0.6 通过字节码理解函数执行结果
(1)%JAVA_HOME%/bin/javap -verbose XXX.class
(2)javap -v .\DemoTest > test.txt
查看字节码：【大家自己做个抛出异常的类理解一下，考题】
Classfile /E:/java_project/execlTest/bin/test/StringBuilderTest.class
Last modified 2018-5-17; size 937 bytes
MD5 checksum 9477783775fde82741d8c8d78a153df4
Compiled from "StringBuilderTest.java"
public class test.StringBuilderTest
minor version: 0
major version: 52
flags: ACC_PUBLIC, ACC_SUPER
判断功能控制台输出什么？
1.1.0.7 编译告警
哪些语句在编译时不会出现编译警告（D）
A) float f = 1.3; B) byte b=257;
C) boolean b = null; D) int i = 10;

1.1.1        浮点数比较相等方法
浮点数比较相等的方法是绝对值得差值要小于1E-6F

public static void main(String[] args) {
  float a = 0.1f;
  float b = 0.11f;
  if (Math.abs(a-b) < 1E-6F) {
    System.out.println(true);
  }
}

1.1.2 double数据类型
0.12345默认类型为double

double var1 = 0.12345;

如果需要表示浮点类型需要再末尾添加f：

0.12345f   float

float var1 = 0.12345f;

1.1.2.1        double/整数类型依旧是double
double var1 = 0.12345;

var1/2 为dobule类型



精度最高的数据类型？
A. int
B. long
C.BigInteger
D.byte
答案：C 

和long型整数运算比，BigInteger不会有范围限制，但缺点是速度比较慢。


1.1.3        不可变类型
immutable Objects就是那些一旦被创建，它们的状态就不能被改变的Objects，每次对他们的改变都是产生了新的immutable的对象。

也就是当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变。JDK本身自带了一些immutable类，比如String，Integer以及其他包装类。比如：java.lang.String 的trim，uppercase,substring等方法，它们返回的都是新的String对象，而并不是直接修改原来的对象。



重点记忆： 

Integer variable = [-128,127] -该范围内的等号重新赋值（不是 new分配的），不会产生新的不可变对象，都是相等的。

String variable =  new String("hello").intern();  -调用了intern永远指向常量池中的"hello"对象，地址是不变的，没有产生新的对象。



其他总结：


常见的8种基本数据类型的包装类型，String, Integer, Short, Long, Byte, Character, Double, Boolean

讨论：https://stackoverflow.com/questions/18037082/are-java-primitives-immutable

题目：
（1）String str = "a" + "b" + "c" + "d";创建了几个对象？
   A. 4个
  B. 1个
  C. 2个
  D.3个
答案：1个


（2）整数比较

int a = 1000;

int b = 1000;
System.out.println(a == b); // true

Integer c = 1000;

Integer d = 1000;
System.out.println(c == d); // false，必须用equals进行对象比较

Integer e = 100;

Integer f = 100;
System.out.println(e == f); // true， [-128,127]之间是不可变对象，如果是new的也是不相等的，只有在常量赋值时才存在相等可能。

Integer var1 = Integer.valueOf(100);
Integer var2 = 100;
System.out.println(var1 == var2); //true ，常量赋值底层调用的是valueOf，所以是一样的

Integer var1 = Integer.valueOf(200);
Integer var2 = 200;
System.out.println(var1 == var2);  //false



（3）字符串比较：

String s = "123456";

String s1 = "123456";

String s2  = "123" + "456";

String s3 = "456";

String s4 = "123" + s3

System.out.println(s == s1); //true

System.out.println(s==s2); // true

System.out.println(s = s4); //false

（4）下列代码示例中，加锁范围可能为全局而非当前类示例内的有（）？ 

A. private final String lock = new String("LOCK").intern();


B. private final String lock = "lock"

C. private final String lock = new String("LOCK");

D. private final Boolean = Boolean.TRUE;

public void doSomthing() {

   synchronized(lock) {

   }

}

答案：ABD



1.1.4        可变参数
可变参数最后还是被编译器处理成了数组，

可变参数可以接受长度为0/1…或者多个元素的数组

特点：

  1、只能出现在参数列表的最后；

  2、... 位于变量类型和变量名之间，前后有无空格都可以;

  3、调用可变参数的方法时，编译器为该可变参数隐含创建一个数组，在方法体中以数组的形式访问可变参数。

  4、如果一个是两个方法是重载，一个是可变参数，一个是固定参数，然后我们调用方法如果固定长度的能满足，那么有优先调用固定的长度的，

 

扩展阅读：https://www.jianshu.com/p/decbcd099354

 

1.1.4 遮蔽/遮掩问题
遮蔽（Shadow）

（1）方法的局部变量遮蔽了类的静态变量
class WhoKnows { 

     static String sentence = "I don't know."; 

     public static void main(String[] args) { 

         String sentence = "I know!"; // 遮蔽了类的静态成员sentence 

        System.out.println(sentence); // 打印的是I know！ 

   }

 } 



遮掩（Obscure）
public class Obscure { 

   static String System; // Obscures type java.lang.System 

   public static void main(String[] args) {

      // Next line won't compile: 

      System refers to static field System.out.println("hello, obscure world!"); 

   }

 }




  [ 回目录 ]1.2 流程控制语句   
1.2.1  break LABEL用法


 

扩展阅读：continue label是一样的

 

1.2.2  try catch finally中的return
-java代码
01
public static void main(String[] args) throws Exception {
02
    System.out.println(func(2));
03
}
04
 
05
private static int func(int n) {
06
    int[] numbers = {1, 2, 3, 4};
07
    try {
08
        int ret = numbers[n] * 2;
09
        return ret;
10
    } finally {
11
        if (n == 2) {
12
            return 0;
13
        }
14
    }
15
}


finally块中的内容会先于try中的return语句执行，如果finall语句块中也有return语句的话，那么直接从finally中返回了，这也是不建议在finally中return的原因。

 

扩展阅读：

  try语句在返回前，将其他所有的操作执行完，保留好要返回的值，而后转入执行finally中的语句，而后分为以下三种情况：

    情况一：如果finally中有return语句，则会将try中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值，这样便无法得到try之前保留好的返回值。

    情况二：如果finally中没有return语句，也没有改变要返回值，则执行完finally中的语句后，会接着执行try中的return语句，返回之前保留的值。

    情况三：如果finally中没有return语句，但是改变了要返回的值，分以下两种情况，：

        1）如果return的数据是基本数据类型或文本字符串，则在finally中对该基本数据的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。

        2）如果return的数据是引用数据类型，而在finally中对该引用数据类型的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值。

情况三举例：

-java代码
01
static class Test {
02
    int val;
03
}
04
public static Test test() {
05
    Test t = new Test();
06
    try {
07
        t.val = 20;
08
        return t;
09
    } finally {
10
        t.val = 30;
11
    }
12
}
13
public static void main(String[] args) {
14
    System.out.println(test().val);
15
}

-java代码
01
public int test() {
02
   try {
03
       // do somthing and throw exception
04
       throw new BusinessException("Failed to excute.");
05
  } catch (Exception e) {
06
       // do something
07
       return  0;
08
  } finally {
09
       return 1;
10
  }
11
}
12
public static void main(String[] args) {
13
   System.out.println(test());
14
}

 A 编译错误
B 输出 "1"
C 输出 "0"
答案：B

1.2.3  switch语句支持的类型
char,  byte,   short,   int

Character,  Byte,  Short,  Integer

enum

String

 

没有boolean，long

 

1.2.3        switch语句break缺失后执行
题目一、变态玩法default前置输出什么？
-java代码
01
public static void main(String[] args) throws IOException {
02
    int x = 2;
03
    switch (x) {
04
        default:
05
            x++;
06
            System.out.println("default");
07
        case 3:
08
            x++;
09
            System.out.println(x);
10
            break;
11
        case 4:
12
            x++;
13
            System.out.println(x);
14
            break;
15
    }
16
    System.out.println(x);
17
}

输出：default执行完成后，case3会继续执行。
default
4
4
（单选）下面语句运行结果为（A）

switch (5) {

default:

System.out.println(5);

case 0:

System.out.println(0);

case 1:

System.out.println(1);

break;

case 2:

System.out.println(2);

break;

}

A. 501 B. 1 C. 0 D. 5

题目二、缺失break输出什么？
-java代码
01
void test() {
02
    int input = 2;
03
    switch (input) {
04
        case 1:
05
            System.out.println("1");
06
        case 2:
07
            System.out.println("2");
08
        case 3:
09
            System.out.println("3");
10
        default:
11
            System.out.println("default");
12
    }
13
}


答案：

 2

3

default


1.2.4   switch语句break编码风格要求
规则3.9 case语句块结束时如果不加break，需要有注释说明
-java代码
01
switch (label) {
02
    case 0:
03
    case 1:
04
        System.out.println("1");
05
        // $FALL-THROUGH$
06
    case 2:
07
        System.out.println("2");
08
        // $FALL-THROUGH$
09
    case 3:
10
        System.out.println("3");
11
        break;
12
    default:
13
        System.out.println("Our dear customer demands all of the following be printed in the default case.");
14
}



  [ 回目录 ]1.3 异常体系   
 

1.3.1  异常泄露敏感信息
敏感异常包装在非敏感异常抛出，不能防止敏感信息泄露



 

正确做法：不抛出任何异常信息，直接在后台记录错误日志。

1.3.2   异常描述
Error表示正常应用程序已无能为力，比如OutOfMemoryError

Throwable是所有Error和Exception的超类，他们的区别是：

Error类一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。

Exception类表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。

Exception类又分为运行时异常（Runtime Exception）和受检查的异常(Checked Exception )。运行时异常编译能通过，但是一运行就终止了，程序不会处理运行时异常，出现这类异常，程序会终止。而受检查的异常，要么用try(){...}catch(){...}捕获，要么用throws字句声明抛出，交给它的父类处理，否则编译不会通过。


Java中常见的运行时异常：
1) ArithmeticException - 在执行算术过程中，不符合数学、计算机计算要求（如除以0、数据范围要求）时引发ArithmeticException。
2) ArrayIndexOutOfBoundsException - IndexOutOfBoundsException子类，用于表示数组越界。
3) ArrayStoreException - 当尝试将错误类型的实例存储到数组中抛出IndexOutOfBoundsException。
4) ClassCastException - 当类型强制转换失败时抛出ClassCastException
5) IllegalArgumentException - 当方法传递了一个不合法或不正确的参数时引发IllegalArgumentException
6) IllegalStateException - 当应用程序在非法或不适当的时间调用了方法时抛出IllegalStateException。

运行时异常考察方式：
void test() {
    int a = 1;
   int b = 0;
   try {
        int c = a / b;
       System.out.println(c);
   } catch (ArrayIndexOutOfBoundsException ex) {
      System.out.println("OutOfBound");
  } catch (NumberFormatException ex) {
     System.out.println("NumberFormatException");
  } catch (Exception ex) {
   System.out.println("Error");
 }
  System.out.println("left");
}
输出：
Error
Left
 
练习题：

（多选题）能够产生DoS攻击的敏感异常有哪些（）？

A. Java.lang.OutOfMemoryError

B. Java.lang.StackOverflowError

C. javax.naming.InsufficientResourcesException

D. java.util.jar.JarException

答案: ABC

以下异常列表哪些属于敏感异常（）？

A. java.io.FileNotFoundException

B. java.net.BindException

C. java.util.ConcurrentModificationException

D. java.sql.SQLException

E. java.lang.NullPointerException

F. java.lang.IllegalArgumentException

答案：ABCD

（单选）异常捕获继承关系，ExceptionB 继承了 ExceptionA，执行下面代码输出的内容（）

-java代码
01
public class Test {
02
    static class ExceptionA extends Exception {
03
    }
04
 
05
    static class ExceptionB extends ExceptionA {
06
    }
07
 
08
    public static void main(String[] args) {
09
        try {
10
            int a = 3;
11
            throw new ExceptionB();
12
        } catch (ExceptionA e1) {
13
            System.out.println("ExceptionA");
14
        } catch (Exception e) {
15
            System.out.println("Exception");
16
        } finally {
17
            System.out.println("Finally");
18
        }
19
 
20
    }
21
}

输出：
ExceptionA
Finally


  [ 回目录 ]1.4 集合体系结构/迭代器   
1.4.1不需要索引的场景，优先使用foreach替代for循环
for-each循环通过完全隐藏迭代器或index变量，避免出错，

 

扩展阅读：《Effective Java》58.for-each 循环优于传统for循环

https://github.com/sjsdfg/effective-java-3rd-chinese/blob/master/docs/notes/58.%20for-each%20%E5%BE%AA%E7%8E%AF%E4%BC%98%E4%BA%8E%E4%BC%A0%E7%BB%9F%20for%20%E5%BE%AA%E7%8E%AF.md

 

1.4.2        LinkedHashMap
构造方法中accessOrder为true，可以当做LRU(Least recently used)缓存使用



 

1.4.3        HashMap中key的hashCode相同，equals判断不相等
https://images2018.cnblogs.com/blog/720994/201806/720994-20180628154821640-2143700356.png

扩展阅读：

https://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/

题目： 

设哈希表长m＝14，哈希函数H（key）＝key％11。表中已有4个结点：addr(15)=4，addr(38)=5，addr(61)=6，addr(84)=7，其余地址为空。如果用二次探测再散列处理冲突，关键字为49的结点的地址是() 

答案：9
解答：Hi = ( H (key) + di ) MOD m
其中i=1,2,3,......k(k<=m-1)、H(key)为哈希函数、m为哈希表表长；di为增量序列。
当di=1,2,3,....m-1,称为线性探测再散列；下次考试会不会考察现行探测再散列？(5+1)%14,(5+2)%14,(5+3)%14... (5+13)%14
当di=(正负)K^2(K=1,2,3,...m/2)称为二次探测再散列（先正后负），说白了就是求模结果加减[1,m/2]的平方:(5+1)%14,(5+4)%14,(5+9)%14
题目中哈希表长为14，所以代入后应该是这样的：
H1=(5+1)%14=6 冲突
H1=(5-1)%14=4 冲突
H2=(5+4)%14=9 无冲突
所以结果为9

1.4.4  ConcurrentHashMap的多线程并发存取
computeIfAbsent



扩展阅读：https://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/

 

1.4.5  Collection的直接子类
Java集合体现，考察Collection直接子类



 考题脑现：

（1）下列哪个数据结构不是继承自集合Collection类？

A. List B. Set C. Queue D. Map

答案： D

（2）不修改Map说的是什么，如下语句是否可以正确执行？ 答案：否

Map<Integer,String> test = new HashMap<>();
test.put(1,"hello");
test.put(2,"unmodifiable");
Map<Integer,String> umap = Collections.unmodifiableMap(test);
umap.clear();

解析：执行上述语句会抛出不支持操作异常

Exception in thread "main" java.lang.UnsupportedOperationException
at java.util.Collections$UnmodifiableMap.clear(Collections.java:1466)

 

  [ 回目录 ]1.5 泛型   
1.5.1   泛型赋值操作


就算容器里装的东西之间有继承关系，但容器之间是没有继承关系的

 

1.5.2        extends和super
Java的泛型可按PECS(Producer Extends Consumer Super)原则来设计上界和下界类型。在泛型编程时，使用部分限定的形参时，<? super T>和<? extends T>的使用场景容易混淆。PECS原则可以帮助很好记住它们：生产者（Producer）使用extends，消费者（Consumer）使用super。



声明一个带泛型的类或接口的时候，建议限制可以用的泛型类型，避免接口使用者乱用。 

泛型通配符 <? extends T> 来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而 <? superT> 不能使用 get 方法，作为接口调用赋值时易出错。



1. 频繁往外读取内容的，适合用 <? extends T> 。

2. 经常往里插入的，适合用 <? super T>



 

扩展阅读：https://www.zhihu.com/question/20400700

 直接上图：





  [ 回目录 ]1.6  线程体系结构   

1.6.1线程同步
CountDownLatch 一个或多个线程等待其他线程完成一系列操作后才执行

https://images2015.cnblogs.com/blog/658141/201707/658141-20170717135253706-802506084.png

CyclicBarrier  多个线程互相等待，直到到达同一个同步点，再继续一起执行。适用于多个线程有固定的多步需要执行，线程间互相等待，当都执行完了，在一起执行下一步。https://images2017.cnblogs.com/blog/658141/201709/658141-20170923170149618-1491101497.png

Phaser； 与cyclicbarrier类似，功能更强。它支持任务在多个点都进行同步，支持动态调整注册任务的数量

https://images2017.cnblogs.com/blog/658141/201709/658141-20170923195018868-478494103.png

 

Exchanger 可以在两个线程之间交换数据，只能是2个线程，他不支持更多的线程之间互换数据，当线程A调用Exchange对象的exchange()方法后，他会陷入阻塞状态，直到线程B也调用了exchange()方法，然后以线程安全的方式交换数据，之后线程A和B继续运行

 

Semaphore: 可以控制同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可; 比如多个窗口叫号，窗口都忙时，顾客等待，有空闲时，最新等待的被通知

 

扩展阅读：https://www.cnblogs.com/aheizi/p/7195963.html


（单选）有一个模拟赛跑游戏，运动员有跑得快的也有跑的慢的，运动员听到枪声后开始起跑，而最后一个运动员到达终点后，标志的比赛的结束。

当前场景下，适合采用哪种线程同步机制（）

A. CountDownLatch跑步模拟

解析：学习参考：https://blog.51cto.com/14207399/2415502

（单选）20个人去银行存款，但是该银行只有两个办公柜台，有空位则上去存钱，没有空位则只能去排队等待，适合采用哪种线程同步机制（）
A. Semaphore 信号量

解析：Semaphore: 可以控制同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，用完自动release。

看到两个柜台，可能思路上容易与Exchanger 混淆，但是柜台两个排队线程之间无需交互数据，所以不能选Exchanger.

1.6.2    通用编程规范之编程实践-多线程并发
规则8.1.1 多线程访问同一个共享的可变变量，需增加同步机制

-java代码
01
public class StopThread {
02
    private static boolean stopRequested;
03
    private static synchronized void requestStop() {
04
      stopRequested = true;
05
    }
06
    private static synchronized boolean isStopRequested() {
07
    return stopRequested;
08
    }
09
    public static void main(String[] args) throws InterruptedException {
10
        Thread backgroundThread = new Thread(new Runnable() {
11
            public void run() {
12
                int count = 0;
13
                while (!isStopRequested()) {
14
                    count++;
15
                }
16
            }
17
        });
18
        backgroundThread.start();
19
        TimeUnit.SECONDS.sleep(1);
20
        requestStop();
21
    }
22
}

题目：如下哪个代码片段使用synchronized是正确的？

-java代码
01
public class DemoTest {
02
   private Integer integer = 1;
03
   private String str1 = 1;
04
   private String str2 = new String("1");
05
   private Boolean bool = Boolean.FALSE;
06
   public void sync1() {
07
       synchronized (integer) {
08
           // do sth
09
      }
10
  }
11
   public void sync2() {
12
       synchronized (str1) {
13
           // do sth
14
      }
15
  }
16
   public void sync3() { // 这个是正确用法
17
       synchronized (str2) {
18
           // do sth
19
      }
20
  }
21
    
22
   public void sync4() {
23
       synchronized (bool) {
24
           // do sth
25
      }
26
  }
27
}

答案：syn3()
解析：
在Java中，会对基本数据的装箱类型进行缓存，Integer的默认缓存范围是 -128~127。
直接使用String str1 = "hello"声明字符串，会从常量池获取实例。
锁的使用要遵循最小化原则，尽可能使用对象锁。参见《华为Java语言通用编程规范》8.1章节-多线程并发、《java并发编程实战》

建议8.1.3 Java 8使用CompletableFuture编写异步任务
说明：CompletableFuture类的一系列aync结尾的方法，可以启动一个异步任务，既可以在默
认的线程池运行，也可以指定线程池。CompletableFuture类也包含了对CompletableFuture
的各种组合（then开头的方法）、结果获取的方法。 例如，异步地通过网址获取链接集，然后
再异步地下载链接集的文本内容
-java代码
1
CompletableFuture.supplyAsync(() -> readPage("http://whatever.com/"))
2
    .thenApply(page -> linkParser.getLinks(page))
3
    .thenAcceptAsync(links -> displayPanel.setText(links.getText()), executor);

1.6.3   线程thread.interrupt()


通过interrupt()和.interrupted()方法两者的配合可以实现正常去停止一个线程。
Thread.interrupt的作用其实不是中断线程，而是通知线程应该中断了。
如果一个线程处于了阻塞状态，则线程在检查中断标示时如果发现中断标示为true，则会在阻塞方法调用处抛出InterruptedException异常。

线程进入阻塞状态的场景：如线程调用了thread.sleep、thread.join、thread.wait、1.5中的condition.await、以及可中断的通道上的 I/O 操作方法后可进入阻塞状态。

考察点：https://www.nowcoder.com/questionTerminal/47703e6586e24a5db27cfd69a72c1433 

（单选）下列哪种情况可以终止当前线程的运行？
A. 当一个优先级高的线程进入就绪状态时
B. 当该线程调用sleep()方法时
C. 当创建一个新线程时
D. 抛出一个异常时

答案：D

解析：抛出异常会终止当前线程的运行。

A选项：当一个优先级高的线程进入就绪状态时 （并不会立即执行，等待时间片轮到的时候才会执行）
B选项：当该线程调用sleep()方法时 （阻塞当前线程，直到阻塞时间达到，重新进入就绪队列）
C选项：当创建一个新线程时 （同A选项一样，进入就绪队列，等待时v间片轮到）



要想答对这道题，要区分“终止” 和 “阻塞”：
终止：这个线程不会再次进入“就绪态”。宣告死亡，即“死亡状态”。终止线程，有三种方法：调用stop，interrupt或在run()中正常终止。

           当catch块捕捉到一个异常时，程序将会被终止，与此同时，线程也被终止，属于被interrupt的一种。
阻塞：进入阻塞态的线程还可以再进入“就绪态”，等待下一次 CPU 时间。


线程的 5 个状态的理解：
1. 新建，刚刚新建的线程，还未进入就绪队列
2. 就绪，进入就绪队列的线程拥有了获得 CPU 时间的机会，但不是一定会马上执行，与线程调度有关。
3. 运行，获得了 CPU 时间，正在被执行的线程。
4. 阻塞，进入阻塞状态的线程只是暂时失去了 CPU 时间，该类线程没有结束，“阻塞态”的线程只能进入到“就绪态”。
5. 死亡，死亡的线程即彻底结束了。

1.6.4 volatile - 易挥发的
对volatile修饰的变量的修改，其它线程立即可见。

不能替代synchronized关键字

常用在一写多读场景

 

扩展阅读：https://www.cnblogs.com/dolphin0520/p/3920373.html

1.6.5 Thread.sleep/Object.wait区别
sleep（）方法

　　sleep()使当前线程进入停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会;

　　 sleep()是Thread类的Static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法是，线程虽然休眠了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）。

　　在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。

　　

wait（）方法

　　wait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁）；其他线程可以访问；

　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。

　　wait()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。

 

   所以sleep()和wait()方法的最大区别是：

　　　　sleep()睡眠时，保持对象锁，仍然占有该锁；

　　　　而wait()睡眠时，释放对象锁。

　　但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException（但不建议使用该方法）。

1.6.6 Volatile和AtomicInteger，AtomicIntegerArray线程安全操作


setA

readA

setB

readB

