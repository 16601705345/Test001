
5 5
SOLO
CPUCY
EKLQH
CRSOL
EKLQO
PGRBC


public class WordMaze {
    static int row;
    static int col;
    static String checkString;
    static char[][] matrix;
    static int[][] color;
    static String result = "NO";
    public static void main(String[] args) {
        // please define the JAVA input here. For example: Scanner s = new Scanner(System.in);
        Scanner scan = new Scanner(System.in);
        row = scan.nextInt();
        col = scan.nextInt();
        checkString = scan.next();
        // please finish the function body here.
        matrix = new char[row][col];
        color = new int[row][col];
        for (int i = 0; i < row; i++) {
            String temp = scan.next();
            for (int j = 0; j < col; j++) {
                matrix[i][j] = temp.charAt(j);
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (checkString.charAt(0) != matrix[i][j]) continue;
                dfs(i, j, 0);
            }
        }
        // please define the JAVA output here. For example: System.out.println(s.nextInt());
        System.out.println(result);
    }

    static void dfs(int i, int j, int find) {
        if (find==checkString.length()  //find==checkString.length()时会越界
            || i<0 || j<0 || i>=row || j>=col
            || color[i][j] == 1
            || matrix[i][j] != checkString.charAt(find)) return;
        if (matrix[i][j] == checkString.charAt(find) && find == checkString.length()-1) {
            result = "YES";     //find==checkString.length()-1 时符合条件则已找到
            return;
        }
        color[i][j] = 1;
        dfs(i-1, j, find+1);
        dfs(i, j-1, find+1);
        dfs(i+1, j, find+1);
        dfs(i, j+1, find+1);
        color[i][j] = 0; //dfs已结束，需还原颜色供后续使用
    }
}
